# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- dev
- master
- feature/*

pool:
  vmImage: 'Ubuntu-16.04' 

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  imageTag: ''

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'
  enabled: false

- task: UseDotNet@2
  displayName: 'Set pipeline to use DotNet Core 3.1'
  inputs:
    version: '3.1.x'
    includePreviewVersions: false
  enabled: false

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages for project'
  inputs:
    restoreSolution: '$(basket-proj-path)'
  enabled: false

- task: CmdLine@2
  displayName: 'Install Dotnet Tools'
  inputs:
    script: 'dotnet tool install --global dotnet-ef'
  enabled: false

- task: CmdLine@2
  displayName: 'Generate DB migration script for MedPark.Basket'
  inputs:
    script: 'dotnet ef migrations script --project $(basket-proj-path) -i -o $(build.artifactstagingdirectory)/sql/MedPark.Basket_DB_Migrations.sql'
  enabled: false

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '$(basket-proj-path)'
    arguments: '-c Release'
  enabled: false

- task: Docker@2
  displayName: 'Login to Docker Hub'
  inputs:
    containerRegistry: 'docker-hub-connection'
    command: 'login'
  enabled: false

- powershell: |
    $currentBranch = "$(build.SourceBranch)"
    Write-Host "Currentbranch is: $currentBranch"

    if ($currentBranch -eq 'refs/heads/master') {
      Write-Host ##vso[task.setvariable variable=imageTag;isOutput=true]latest
      Write-Host "New tag - $env:imageTag"
      Write-Host "New tag - $env:imageTag"
      return
    } else {
      Write-Host ##vso[task.setvariable variable=imageTag;isOutput=true]dev
    }
  displayName: 'Set Docker image tag based on branch'
  enabled: true

- task: Docker@2
  displayName: 'Build and Push docker image'
  inputs:
    containerRegistry: 'docker-hub-connection'
    repository: 'geradedev/medpark-basket'
    command: 'buildAndPush'
    Dockerfile: 'src/MedPark.Basket/Dockerfile.multistage'
    tags: 'latest'
  enabled: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  enabled: false
